import { ArnFormat, Lazy, Resource, ResourceProps } from "aws-cdk-lib";
import { IFeature } from "./lib/features";
import { IConstruct } from "constructs";
import { CfnDetector } from "aws-cdk-lib/aws-guardduty";
import { IDataSource } from "./lib/data-source";
import { ResourceImporter } from "../utils/importer";


/**
 * Specifies how frequently updated findings are exported.
 * 
 * @see [Detector FindingPublishingFrequency](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-detector.html#cfn-guardduty-detector-findingpublishingfrequency)
 */
export class FindingPublishingFrequency {
  /**
   * Publish findings every fifteen minutes.
   */
  public static readonly FIFTEEN_MINUTES: FindingPublishingFrequency = FindingPublishingFrequency.of('FIFTEEN_MINUTES');

  /**
   * Publish findings every hour.
   */
  public static readonly ONE_HOUR: FindingPublishingFrequency = FindingPublishingFrequency.of('ONE_HOUR');

  /**
   * Publish findings every six hours.
   */
  public static readonly SIX_HOURS: FindingPublishingFrequency = FindingPublishingFrequency.of('SIX_HOURS');

  /**
   * Escape hatch for specifying custom publishing frequency values.
   * 
   * This is primarily intended in case additional options are added and
   * support for those values has not yet been officially added.
   * 
   * Where possible it is recommended that the existing provided values be
   * used.
   * 
   * @param label The label for the publishing frequency value as would be
   * expected by CloudFormation.
   * @returns An object that can be used for setting the publishing frequency
   * for a detector resource.
   */
  public static of(label: string): FindingPublishingFrequency {
    return new FindingPublishingFrequency(label);
  }


  /**
   * The label for the publishing frequency value as would be expected by
   * CloudFormation.
   */
  public readonly label: string;

  /**
   * Creates a new instance of the FindingPublishingFrequency class.
   * 
   * @param label The label for the publishing frequency value as would be
   * expected by CloudFormation.
   */
  private constructor(label: string) {
    this.label = label;
  }
}

/**
 * Represents a GuardDuty detector in AWS.
 */
export interface IDetector {
  /**
   * The Amazon Resource Name (ARN) of the GuardDuty detector.
   */
  readonly detectorArn: string;

  /**
   * The ID generated by AWS for the GuardDuty detector.
   */
  readonly detectorId: string;
}

/**
 * Configuration for importing an existing GuardDuty detector.
 */
export interface DetectorAttributes {
  /**
   * The Amazon Resource Name (ARN) of the GuardDuty detector.
   */
  readonly detectorArn?: string;

  /**
   * The ID generated by AWS for the GuardDuty detector.
   */
  readonly detectorId?: string;
}

/**
 * Optional configuration for the detector resource.
 */
export interface DetectorOptions {
  /**
   * Specifies whether the detector is to be enabled on creation.
   * 
   * @see [Detector Enable](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-detector.html#cfn-guardduty-detector-enable)
   */
  readonly enabled?: boolean;

  /**
   * Collection of additional features to be configured on the detector.
   * 
   * @see [Detector Features](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-detector.html#cfn-guardduty-detector-features)
   */
  readonly features?: IFeature[];

  /**
   * Specifies how frequently updated findings are exported.
   * 
   * @see [Detector FindingPublishingFrequency](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-detector.html#cfn-guardduty-detector-findingpublishingfrequency)
   */
  readonly publishingFrequency?: FindingPublishingFrequency;
}

/**
 * Configuration for the dector resource.
 */
export interface DetectorProps extends ResourceProps, DetectorOptions {}

/**
 * A base class providing common functionality between created and imported
 * detectors.
 */
abstract class DetectorBase extends Resource implements IDetector {
  /**
   * The Amazon Resource Name (ARN) of the GuardDuty detector.
   */
  public abstract readonly detectorArn: string;

  /**
   * The ID generated by AWS for the GuardDuty detector.
   */
  public abstract readonly detectorId: string;

  /**
   * Creates a new instance of the DetectorBase resource.
   * 
   * @param scope A CDK Construct that will serve as this resource's parent in
   * the construct tree.
   * @param id A name to be associated with the stack and used in resource
   * naming. Must be unique within the context of 'scope'.
   * @param props Arguments related to the configuration of the resource.
   */
  public constructor(scope: IConstruct, id: string, props?: ResourceProps) {
    super(scope, id, props);
  }
}

/**
 * Represents a GuardDuty detector.
 * 
 * A detector is an object that represents the GuardDuty service. A detector is
 * required for GuardDuty to become operational.
 * 
 * @see [AWS::GuardDuty::Detector](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-detector.html)
 */
export class Detector extends DetectorBase {
  /**
   * The format this resource uses for it's Amazon Resource Name (ARN).
   */
  public static readonly ARN_FORMAT: ArnFormat = ArnFormat.SLASH_RESOURCE_NAME;

  /**
   * Imports an existing GuardDuty detector by specifying its Amazon Resource
   * Name (ARN).
   * 
   * @param scope A CDK Construct that will serve as this resources's parent in
   * the construct tree.
   * @param id A name to be associated with the stack and used in resource
   * naming. Must be unique within the context of 'scope'.
   * @param detectorArn The ARN of the existing GuardDuty detector to be
   * imported.
   * @returns An object representing the imported GuardDuty detector.
   */
  public static fromDetectorArn(scope: IConstruct, id: string, detectorArn: string): IDetector {
    return Detector.fromDetectorAttributes(scope, id, {
      detectorArn: detectorArn,
    });
  }

  /**
   * Imports an existing GuardDuty detector by explicitly specifying its
   * attributes.
   * 
   * @param scope A CDK Construct that will serve as this resources's parent in
   * the construct tree.
   * @param id A name to be associated with the stack and used in resource
   * naming. Must be unique within the context of 'scope'.
   * @param attrs The attributes of the existing GuardDuty detector to be
   * imported.
   * @returns An object representing the imported GuardDuty detector.
   */
  public static fromDetectorAttributes(scope: IConstruct, id: string, attrs: DetectorAttributes): IDetector {
    const importer = new ResourceImporter(scope, id, {
      arnFormat: Detector.ARN_FORMAT,
      service: 'guardduty',
      resource: 'detector',
    });

    const identities = importer.resolveIdentities(attrs.detectorArn, attrs.detectorId);

    class Import extends DetectorBase {
      public readonly detectorArn: string = identities.arn;
      public readonly detectorId: string = identities.id;
    }

    return new Import(scope, id);
  }

  /**
   * Imports an existing GuardDuty detector by specifiying its AWS generated
   * ID.
   * 
   * @param scope A CDK Construct that will serve as this resources's parent in
   * the construct tree.
   * @param id A name to be associated with the stack and used in resource
   * naming. Must be unique within the context of 'scope'.
   * @param detectorId The AWS generated ID of an existing GuardDuty detector
   * to be imported.
   * @returns An object representing the imported GuardDuty detector.
   */
  public static fromDetectorId(scope: IConstruct, id: string, detectorId: string): IDetector {
    return Detector.fromDetectorAttributes(scope, id, {
      detectorId: detectorId,
    });
  }


  /**
   * Internal collection of additional features to be configured on the
   * detector.
   */
  private readonly _features: IFeature[];

  /**
   * Specifies whether the detector is to be enabled on creation.
   * 
   * @see [Detector Enable](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-detector.html#cfn-guardduty-detector-enable)
   * 
   * @group Inputs
   */
  public readonly enabled: boolean;

  /**
   * Specifies how frequently updated findings are exported.
   * 
   * @see [Detector FindingPublishingFrequency](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-detector.html#cfn-guardduty-detector-findingpublishingfrequency)
   * 
   * @group Inputs
   */
  public readonly publishingFrequency?: FindingPublishingFrequency;

  /**
   * Collection of additional features to be configured on the detector.
   * 
   * @see [Detector Features](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-detector.html#cfn-guardduty-detector-features)
   * 
   * @group Inputs
   */
  public get features(): IFeature[] {
    return [...this._features];
  }

  /**
   * The underlying Detector CloudFormation resource.
   * 
   * @see [AWS::GuardDuty::Detector](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-detector.html)
   * 
   * @group Resources
   */
  public readonly resource: CfnDetector;

  /**
   * The Amazon Resource Name (ARN) of the GuardDuty detector.
   */
  public readonly detectorArn: string;

  /**
   * The ID generated by AWS for the GuardDuty detector.
   */
  public readonly detectorId: string;


  /**
   * Creates a new instance of the Detector resource.
   * 
   * @param scope A CDK Construct that will serve as this resource's parent in
   * the construct tree.
   * @param id A name to be associated with the stack and used in resource
   * naming. Must be unique within the context of 'scope'.
   * @param props Arguments related to the configuration of the resource.
   */
  public constructor(scope: IConstruct, id: string, props: DetectorProps = {}) {
    super(scope, id, props);

    this._features = [];

    this.enabled = props.enabled ?? true;
    this.publishingFrequency = props.publishingFrequency;

    this.resource = new CfnDetector(this, 'Resource', {
      enable: this.enabled,
      dataSources: Lazy.any({
        produce: () => {
          const dataSources = this._features.reduce((prev, cur) => {
            if (cur.dataSource) {
              prev.push(cur.dataSource);
            }

            return prev;
          }, [] as IDataSource[]);

          return dataSources.length === 0 ? undefined : dataSources.reduce((prev, cur) => {
            return {
              ...prev,
              ...cur.bind(this),
            };
          });
        },
      }),
      features: Lazy.any(
        {
          produce: () => {
            return this._features.map((feature): CfnDetector.FeatureConfigurationsProperty => {
              return {
                additionalConfiguration: feature.settings?.map((setting): CfnDetector.FeatureAdditionalConfigurationProperty => {
                  return {
                    name: setting.name,
                    status: setting.enabled ? 'ENABLED' : 'DISABLED',
                  };
                }),
                name: feature.name,
                status: feature.enabled ? 'ENABLED' : 'DISABLED',
              };
            });
          }
        },
        {
          omitEmptyArray: true,
        }
      ),
      findingPublishingFrequency: this.publishingFrequency?.label,
    });

    this.detectorArn = this.stack.formatArn({
      arnFormat: Detector.ARN_FORMAT,
      resource: 'detector',
      resourceName: this.resource.ref,
      service: 'guardduty',
    });
    this.detectorId = this.resource.ref;

    props.features?.forEach((x) => {
      this.addFeature(x);
    });
  }
  
  /**
   * Configures a feature to be enabled on the detector.
   * 
   * @param feature The feature to be configured.
   * @returns The detector on which the feature was configured.
   */
  public addFeature(feature: IFeature): Detector {
    const matches = this._features.filter((x) => {
      return x.name == feature.name;
    });

    if (matches.length > 0) {
      throw new Error([
        `Could not add feature to GuardDuty detector '${this.node.addr}'`,
        'because there is already a feature with the same name',
        `(${feature.name}) already exists.`
      ].join(' '));
    }

    this._features.push(feature);
    return this;
  }
}