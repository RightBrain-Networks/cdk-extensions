import { ArnFormat, IResolvable, IResource, Resource, Token } from 'aws-cdk-lib';
import { IConstruct } from 'constructs';
import { IIpam } from './ipam';
import { ResourceImporter } from '../utils/importer';


/**
 * Represents an IPAM scope in AWS.
 */
export interface IIpamScope extends IResource {
  /**
   * The ARN of the scope.
   */
  readonly ipamScopeArn: string;

  /**
   * The ID of an IPAM scope.
   */
  readonly ipamScopeId: string;

  /**
   * The ARN of an IPAM.
   */
  readonly ipamScopeIpamArn: string;

  /**
   * Defines if the scope is the default scope or not.
   */
  readonly ipamScopeIsDefault: IResolvable;

  /**
   * The number of pools in a scope.
   */
  readonly ipamScopePoolCount: number;

  /**
   * The type of the scope.
   */
  readonly ipamScopeType: string;
}

/**
 * Configuration for importing an existing IPAM scope.
 */
export interface IpamScopeAttributes {
  /**
   * The IPAM to which the scope belongs.
   */
  readonly ipam?: IIpam;

  /**
   * The Amazon Resource Name (ARN) of the IPAM scope.
   */
  readonly ipamScopeArn?: string;

  /**
   * The ID generated by AWS for the IPAM scope.
   */
  readonly ipamScopeId?: string;

  /**
   * Defines if the scope is the default scope or not.
   */
  readonly isDefault?: boolean;

  /**
   * The number of pools in a scope.
   */
  readonly poolCount?: number;

  /**
   * The type of the scope.
   */
  readonly scopeType?: string;
}


export class IpamScope {
  /**
   * The format for Amazon Resource Names (ARN's) for IPAM scope resources.
   */
  public static readonly ARN_FORMAT: ArnFormat = ArnFormat.SLASH_RESOURCE_NAME;

  /**
   * Imports an existing IPAM scope by specifying its Amazon Resource Name
   * (ARN).
   *
   * @param scope A CDK Construct that will serve as this resources's parent in
   * the construct tree.
   * @param id A name to be associated with the stack and used in resource
   * naming. Must be unique within the context of 'scope'.
   * @param ipamScopeArn The ARN of the existing IPAM scope to be imported.
   * @returns An object representing the imported IPAM scope.
   */
  public static fromIpamScopeArn(scope: IConstruct, id: string, ipamScopeArn: string): IIpamScope {
    return IpamScope.fromIpamScopeAttributes(scope, id, {
      ipamScopeArn: ipamScopeArn,
    });
  }

  /**
   * Imports an existing IAPM scope by explicitly specifying its attributes.
   *
   * @param scope A CDK Construct that will serve as this resources's parent in
   * the construct tree.
   * @param id A name to be associated with the stack and used in resource
   * naming. Must be unique within the context of 'scope'.
   * @param attrs The attributes of the existing IPAM scope to be imported.
   * @returns An object representing the imported IPAM scope.
   */
  public static fromIpamScopeAttributes(scope: IConstruct, id: string, attrs: IpamScopeAttributes): IIpamScope {
    const importer = new ResourceImporter(scope, id, {
      arnFormat: IpamScope.ARN_FORMAT,
      service: 'ec2',
      resource: 'ipam-scope',
    });

    const identities = importer.resolveIdentities(attrs.ipamScopeArn, attrs.ipamScopeId);
    const props = importer.resolveProperties({
      ipamScopeIpamArn: attrs.ipam?.ipamArn,
      ipamScopeIsDefault: attrs.isDefault,
      ipamScopePoolCount: attrs.poolCount,
      ipamScopeType: attrs.scopeType,
    });

    class Import extends Resource implements IIpamScope {
      public readonly ipamScopeArn: string = identities.arn;
      public readonly ipamScopeId: string = identities.id;
      public readonly ipamScopeIpamArn: string = Token.asString(props.ipamScopeIpamArn);
      public readonly ipamScopeIsDefault: IResolvable = Token.asAny(props.ipamScopeIsDefault);
      public readonly ipamScopePoolCount: number = Token.asNumber(props.ipamScopePoolCount);
      public readonly ipamScopeType: string = Token.asString(props.ipamScopeType);
    }

    return new Import(scope, id);
  }

  /**
   * Imports an existing IPAM scope by explicitly specifying its AWS generated
   * ID.
   *
   * @param scope A CDK Construct that will serve as this resources's parent in
   * the construct tree.
   * @param id A name to be associated with the stack and used in resource
   * naming. Must be unique within the context of 'scope'.
   * @param ipamScopeId The AWS generated ID of the existing IPAM scope to be
   * imported.
   * @returns An object representing the imported IPAM scope.
   */
  public static fromIpamScopeId(scope: IConstruct, id: string, ipamScopeId: string): IIpamScope {
    return IpamScope.fromIpamScopeAttributes(scope, id, {
      ipamScopeId: ipamScopeId,
    });
  }
}