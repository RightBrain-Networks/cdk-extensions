import { ArnFormat, Fn, Lazy, RemovalPolicy, Resource, ResourceProps, Stack, Token } from 'aws-cdk-lib';
import { CfnWorkspace } from 'aws-cdk-lib/aws-aps';
import { ILogGroup, LogGroup, RetentionDays } from 'aws-cdk-lib/aws-logs';
import { ITopic } from 'aws-cdk-lib/aws-sns';
import { IConstruct } from 'constructs';
import { AlertManagerConfiguration, IAlertManagerConfiguration } from './lib/alert-manager';
import { undefinedIfNoKeys } from '../utils/formatting';


/**
 * Represents an APS workspace in AWS.
 */
export interface IWorkspace {
  /**
   * The Amazon Resource Name (ARN) of the APS workspace.
   */
  readonly workspaceArn: string;

  /**
   * The ID generated by AWS for the APS workspace.
   */
  readonly workspaceId: string;

  /**
   * The Prometheus endpoint attribute of the workspace.
   *
   * This is the endpoint prefix without the remote_write or query API
   * appended.
   */
  readonly workspacePrometheusEndpoint: string;

  /**
   * The URL of the remote write endpoint which can be used to ingest metrics
   * into the Prometheus workspace.
   */
  readonly workspaceQueryUrl: string;

  /**
   * The URL of the endpoint that other services can use to query the
   * workspace.
   */
  readonly workspaceRemoteWriteUrl: string;
}

/**
 * Configuration for importing an existing APS workspace.
 */
export interface WorkspaceAttributes {
  /**
   * The Amazon Resource Name (ARN) of the APS workspace.
   */
  readonly workspaceArn?: string;

  /**
   * The ID generated by AWS for the APS workspace.
   */
  readonly workspaceId?: string;

  /**
   * The Prometheus endpoint attribute of the workspace.
   *
   * This is the endpoint prefix without the remote_write or query API
   * appended.
   */
  readonly workspacePrometheusEndpoint?: string;
}

/**
 * Alerting configuration to use when setting up an APS workspace.
 */
export interface WorkspaceAlertingOptions {
  /**
   * The alert manager configuration to use when setting up alerting.
   *
   * If alerting is enabled and no configuration is given a default
   * configuration that sends all alerts to SNS will be used.
   */
  readonly configuration?: IAlertManagerConfiguration;

  /**
   * Controls whether alerting from the APS workspace should be configured.
   *
   * @default true
   */
  readonly enabled?: boolean;

  /**
   * The SNS topic where alerts should be sent when using the default alerting
   * configuration.
   *
   * If a custom alert manager configuration is provided this option is ignored.
   */
  readonly topic?: ITopic;
}

/**
 * Logging configuration to use when setting up the APS workspace.
 */
export interface WorkspaceLoggingOptions {
  /**
   * Controls whether logging for the workspace should be enabled.
   *
   * @default true
   */
  readonly enabled?: boolean;

  /**
   * The log group where events from the APS workspace will be written.
   *
   * If logging is enabled and no log group is provided a new log group will be
   * created.
   *
   * @see [Workspace LoggingConfiguration.LogGroupArn](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-aps-workspace-loggingconfiguration.html#cfn-aps-workspace-loggingconfiguration-loggrouparn)
   */
  readonly logGroup?: ILogGroup;

  /**
   * The length of time that logs from the APS workspace should be kept when a
   * new log group is created for the workspace.
   *
   * This property is ignored when a log group is passed as part of the logging
   * configuration.
   *
   * @see [LogGroup RetentionInDays](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html#cfn-logs-loggroup-retentionindays)
   */
  readonly retention?: RetentionDays;
}

/**
 * Configuration for the Workspace resource.
 */
export interface WorkspaceProps extends ResourceProps {
  /**
   * The details used to configure alerting for the APS workspace.
   *
   * @see [Workspace AlertManagerDefinition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html#cfn-aps-workspace-alertmanagerdefinition)
   */
  readonly alerting?: WorkspaceAlertingOptions;

  /**
   * An alias that you assign to this workspace to help you identify it. It
   * does not need to be unique.
   *
   * The alias can be as many as 100 characters and can include any type of
   * characters.
   *
   * @see [Workspace Alias](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html#cfn-aps-workspace-alias)
   */
  readonly alias?: string;

  /**
   * The details used for configuring logging for the APS workspace.
   *
   * @see [Workspace LoggingConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html#cfn-aps-workspace-loggingconfiguration)
   */
  readonly logging?: WorkspaceLoggingOptions;
}

/**
 * A base class providing common functionality between created and imported APS
 * workspaces.
 */
abstract class WorkspaceBase extends Resource implements IWorkspace {
  /**
   * The Amazon Resource Name (ARN) of the APS workspace.
   */
  public abstract readonly workspaceArn: string;

  /**
   * The ID generated by AWS for the APS workspace.
   */
  public abstract readonly workspaceId: string;

  /**
   * The Prometheus endpoint attribute of the workspace.
   *
   * This is the endpoint prefix without the remote_write or query API
   * appended.
   */
  public abstract readonly workspacePrometheusEndpoint: string;

  /**
   * The URL of the remote write endpoint which can be used to ingest metrics
   * into the Prometheus workspace.
   */
  public readonly workspaceQueryUrl: string;

  /**
   * The URL of the endpoint that other services can use to query the
   * workspace.
   */
  public readonly workspaceRemoteWriteUrl: string;


  public constructor(scope: IConstruct, id: string, props?: ResourceProps) {
    super(scope, id, props);

    this.workspaceQueryUrl = Lazy.string({
      produce: () => {
        return `${this.workspacePrometheusEndpoint}api/v1/query`;
      },
    });

    this.workspaceRemoteWriteUrl = Lazy.string({
      produce: () => {
        return `${this.workspacePrometheusEndpoint}api/v1/remote_write`;
      },
    });
  }
}

/**
 * Represents an Amazon Managed Service for Prometheus workspace.
 *
 * A _workspace_ is a logical and isolated Prometheus server dedicated to
 * Prometheus resources such as metrics.
 *
 * You can have one or more workspaces in each Region in your account.
 *
 * @see [AWS::APS::Workspace](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html#aws-resource-aps-workspace-return-values)
 */
export class Workspace extends WorkspaceBase implements IWorkspace {
  /**
   * Imports an existing APS workspace by specifying its Amazon Resource Name
   * (ARN).
   *
   * @param scope A CDK Construct that will serve as this resources's parent in
   * the construct tree.
   * @param id A name to be associated with the stack and used in resource
   * naming. Must be unique within the context of 'scope'.
   * @param workspaceArn The ARN of the existing APS workspace to be imported.
   * @returns An object representing the imported APS workspace.
   */
  public static fromWorkspaceArn(scope: IConstruct, id: string, workspaceArn: string): IWorkspace {
    return Workspace.fromWorkspaceAttributes(scope, id, {
      workspaceArn: workspaceArn,
    });
  }

  /**
   * Imports an existing APS workspace by explicitly specifying its attributes.
   *
   * @param scope A CDK Construct that will serve as this resources's parent in
   * the construct tree.
   * @param id A name to be associated with the stack and used in resource
   * naming. Must be unique within the context of 'scope'.
   * @param attrs The attributes of the existing APS workspace to be imported.
   * @returns An object representing the imported APS workspace.
   */
  public static fromWorkspaceAttributes(scope: IConstruct, id: string, attrs: WorkspaceAttributes): IWorkspace {
    const stack = Stack.of(scope);
    let buildId = attrs.workspaceId;
    let buildArn = attrs.workspaceArn;
    let buildPrometheusEndpoint = attrs.workspacePrometheusEndpoint;

    if (buildId === undefined && buildArn) {
      buildId = stack.splitArn(buildArn, ArnFormat.SLASH_RESOURCE_NAME).resourceName!;
    } else if (buildId === undefined && buildPrometheusEndpoint) {
      buildId = Token.isUnresolved(buildPrometheusEndpoint) ?
        Fn.select(4, Fn.split('/', buildPrometheusEndpoint)) :
        buildPrometheusEndpoint.split('/')[4];
    }

    if (buildId === undefined) {
      throw new Error([
        "At least one of 'workspaceId', 'workspaceArn', or",
        "'workspacePrometheusEndpoint' must be spacified when importing a",
        'Prometheus workspace.',
      ].join(' '));
    }

    const workspaceId = buildId;
    const workspaceArn = buildArn ?? stack.formatArn({
      resource: 'workspace',
      resourceName: buildId,
      service: 'aps',
    });
    const prometheusEndpoint = buildPrometheusEndpoint ?? `https://aps-workspaces.${stack.region}.amazonaws.${stack.urlSuffix}/workspaces/${buildId}/`;

    class Import extends WorkspaceBase {
      public readonly workspaceArn: string = workspaceArn;
      public readonly workspaceId: string = workspaceId;
      public readonly workspacePrometheusEndpoint: string = prometheusEndpoint;
    }

    return new Import(scope, id);
  }

  /**
   * Imports an existing APS workspace by explicitly specifying its AWS
   * generated ID.
   *
   * @param scope A CDK Construct that will serve as this resources's parent in
   * the construct tree.
   * @param id A name to be associated with the stack and used in resource
   * naming. Must be unique within the context of 'scope'.
   * @param workspaceId The AWS generated ID of the existing APS workspace to
   * be imported.
   * @returns An object representing the imported APS workspace.
   */
  public static fromWorkspaceId(scope: IConstruct, id: string, workspaceId: string): IWorkspace {
    return Workspace.fromWorkspaceAttributes(scope, id, {
      workspaceArn: workspaceId,
    });
  }


  /**
   * The details used to configure alerting for the APS workspace.
   *
   * @see [Workspace AlertManagerDefinition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html#cfn-aps-workspace-alertmanagerdefinition)
   *
   * @group Inputs
   */
  readonly alerting?: WorkspaceAlertingOptions;

  /**
   * An alias that you assign to this workspace to help you identify it. It
   * does not need to be unique.
   *
   * The alias can be as many as 100 characters and can include any type of
   * characters.
   *
   * @see [Workspace Alias](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html#cfn-aps-workspace-alias)
   *
   * @group Inputs
   */
  public readonly alias?: string;

  /**
   * The details used for configuring logging for the APS workspace.
   *
   * @see [Workspace LoggingConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html#cfn-aps-workspace-loggingconfiguration)
   *
   * @group Inputs
   */
  public readonly logging?: WorkspaceLoggingOptions;

  /**
   * The configuration contolling how alerts are sent for the workspace. Only
   * available when alerting is enabled and the default alerting configuration
   * is used.
   *
   * @group Resources
   */
  public readonly alertManagerConfiguration?: AlertManagerConfiguration;

  /**
   * The SNS topic where alerts generated by the workspace will be sent. Only
   * set if alerting is enabled and the default alert manager configuration is
   * used.
   *
   * @group Resources
   */
  public readonly alertTopic?: ITopic;

  /**
   * The CloudWatch log group where logs emitted by the APS workspace will be
   * sent.
   *
   * @group Resources
   */
  public readonly logGroup?: ILogGroup;

  /**
   * The underlying Workspace CloudFormation resource.
   *
   * @see [AWS::APS::Workspace](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-aps-workspace.html)
   *
   * @group Resources
   */
  public readonly resource: CfnWorkspace;

  /**
   * The Amazon Resource Name (ARN) of the APS workspace.
   */
  public readonly workspaceArn: string;

  /**
   * The ID generated by AWS for the APS workspace.
   */
  public readonly workspaceId: string;

  /**
   * The Prometheus endpoint attribute of the workspace.
   *
   * This is the endpoint prefix without the remote_write or query API
   * appended.
   */
  public readonly workspacePrometheusEndpoint: string;


  /**
   * Creates a new instance of the Workspace class.
   *
   * @param scope A CDK Construct that will serve as this resource's parent in
   * the construct tree.
   * @param id A name to be associated with the stack and used in resource
   * naming. Must be unique within the context of 'scope'.
   * @param props Arguments related to the configuration of the resource.
   */
  public constructor(scope: IConstruct, id: string, props: WorkspaceProps = {}) {
    super(scope, id, props);

    this.alerting = props.alerting;
    this.alias = props.alias;
    this.logging = props.logging;

    if (this.logging?.enabled ?? true) {
      this.logGroup = this.logging?.logGroup ?? new LogGroup(this, 'log-group', {
        removalPolicy: RemovalPolicy.DESTROY,
        retention: this.logging?.retention ?? RetentionDays.TWO_WEEKS,
      });
    }

    if ((props.alerting?.enabled ?? true) && props.alerting?.configuration === undefined) {
      this.alertManagerConfiguration = new AlertManagerConfiguration(this, 'alert-manager-configuration');
      this.alertTopic = this.alertManagerConfiguration.defaultTopic;
    }

    const alerting = props.alerting?.configuration ?? this.alertManagerConfiguration;
    const alertingDetails = (props.alerting?.enabled ?? true) ? alerting!.bind(this) : undefined;

    this.resource = new CfnWorkspace(this, 'Resource', {
      alertManagerDefinition: alertingDetails?.contents,
      alias: this.alias,
      loggingConfiguration: undefinedIfNoKeys({
        logGroupArn: this.logGroup?.logGroupArn,
      }),
    });

    this.workspaceArn = this.resource.attrArn;
    this.workspaceId = this.resource.attrWorkspaceId;
    this.workspacePrometheusEndpoint = this.resource.attrPrometheusEndpoint;
  }
}